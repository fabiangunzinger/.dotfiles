#################################################
# general alises
#################################################

# Virtual environments
function nve() { $1 -m venv .venv; }
alias ave='source ./.venv/bin/activate'
alias dve='deactivate'

alias pi='python -m pip install'
alias pl='python -m pip list'
alias pf='python -m pip freeze > requirements.txt'
alias pir='python -m pip install -r requriements.txt'

alias aqu='source ~/.venvs/quarto3.10/bin/activate'
alias aju='source ~/.venvs/jupyter3.10/bin/activate'

# Blog
alias qpr='quarto preview'
alias qre='quarto render && hugo'
function hnp() { hugo new posts/$1; }

# Neovim
alias vi="nvim"
alias vif="nvim +'Telescope find_files'"
alias vig="nvim +'Telescope live_grep'"

# ssh
function sshn() { ssh-keygen -t ed25519 -C $1; }

# Miscellaneous
alias lg='ls -la | grep $1'
alias lt="exa --tree -a -I '.git|__pycache__|.mypy_cache|.ipynb_checkpoints|.DS_Store'"
alias pwdc='pwd | pbcopy'
alias rmf='rm -rf'

# Oh My Zsh
alias rom='omz reload'   # use this instead of source!
alias omzu='omz update'
alias fzs='nvim ~/.zshrc'
alias pas='acs'   # pretty aliases

# misc. commands
alias jula='jupyter lab'
alias vgp='vimgolf put '

# terraform
alias tf='terraform'
alias tfi='tf init'
alias tfa='tf apply'
alias tfo='tf output'
alias tfoi='tf output instance_id'
alias tfs='tf show'
alias tfd='tf destroy'

# tmux
alias tml='tmux ls'
function tmn() { tmux new-session -s $1; }
function tma() { tmux attach-session -t $1; }
function tmk() { tmux kill-session -t $1; }

# open files
alias fzg='ddf; cd zsh; nvim zshrc.general'
alias fz='vi ~/.zshrc'
alias fzm='vi ~/.tmux.conf'
# open vim in project
alias vzs='ddf; cd zsh; vi'

# jupyter kernels
## Install ipykernel of venv in current directory into jupyter venv
function iki { ./.venv/bin/python -m ipykernel install --prefix=$HOME/.venvs/jupyter3.10/ --name "$1"; }
##Â Install ipykernel into its own project environment
function ikio { python -m ipykernel install --name $1 --user; }
## Manage kernels
alias jkl='jupyter kernelspec list'
function jkr { jupyter kernelspec remove $1; }

# pandoc
function pdmp() { pandoc "$1" -o "${1/md/pdf}"; }

# github
alias ghp='git help'                # ..git verb for which help is needed
alias gs='git status'               # verbose status
alias gss='git status --short'      # cols are staging area and working-tree
alias gl='git log --oneline -3'     # oneline log
alias glv='git log -3'              # verbose log
alias gd='git diff'                 # .. ref a and b, defaults to wd and idx
alias gds='git diff --staged'       # diff between index and last commit
alias gsw='git show'                # show some object
alias gt='git tag'                  # ..tagname for last commit, dft lists tags

alias ga='git add'                  # .. file to stage (move to index)
alias gaa='git add --all'           # add all modified files to index
alias gap='git add --patch'         # stage individual hunks
alias gc='git commit --verbose'     # show diff in editor
alias gcm='git commit --message'    # commit with inline message
alias gcam='gaa; gcm'               # add and commit all edited files
alias gca='gc --amend'              # add changes to last commit or edit msg
alias gcan='gcadd --no-edit'        # add changes to last commit (keep msg)

alias grm='git rm'                  # ..fn to remove, then stage for commit
alias grmc='git rm --cached'        # ..fn to remove from index but not wd
alias gre='git restore'             # ..fn to revert back to state of last commit
alias gres='git restore --staged'   # ..fn to remove from index

alias gst='git stash'               # save current state of working tree
alias gstp='gst pop'                 # apply and delete (last)
alias gsta='gst apply'              # ..stash ref (sr) to apply, default sr is last
alias gstd='gst drop'               # ..sr to drop, default sr is last
alias gstb='gst branch'              # ..sr to create branch from, default sr is last
alias gstl='gst list'               # list stored stashes

# alias gcn='git clean'               # ..fn to be removed from wd
# alias gcnn='gc --dry-run'           # dry run of above

alias gph='git push'                # move remote pointer to match local one
alias gphsu='gph --set-upstream origin $(git_current_branch'
# alias gphd='gph origin --delete'   # ..refs to delete (e.g. branchname)
alias gf='git fetch'                # download new files from remote (no merge)
alias gpl='git pull'                # download and merge new files from remote
function glph() { gaa; gcm "$1"; gph; } # lazy push: add, ommit, and push all files

alias gb='git --no-pager branch -vv' # list branches
alias gbm='gb --merged'             # list bs already merged into current b
alias gbnm='gb --no-merged'         # list bs not yet merged into current b
alias gbmo='git branch --move'      # rename by appending <oldname> <newname>
alias gsw='git switch'               # switch to branch (or get from remote)
alias gsc='git switch --create'     # create new branch and switch to it
alias gsp='git switch -'            # switch to previously checked out branch
alias gsm='git switch $(git_main_branch)' # switch to main branch
alias gsd='git switch $(git_develop_branch)' # switch to dev branch
alias gsd='git switch development' # switch to development branch
alias gm='git merge'                # merge branch
alias gbd='git branch -d'           # delete branch
alias gbD='git branch -D'          # force delete branch with uncommited edits


#################################################
# general config
#################################################

# Start tmux session on startup
_not_inside_tmux() { [[ -z "$TMUX" ]] }
ensure_tmux_is_running() {
  if _not_inside_tmux; then
    tat
  fi
}
ensure_tmux_is_running

bindkey -s ^f "tmux-sessionizer\n"

export MYDIRS=(~/.dotfiles/ ~/dev/work ~/dev/personal)
export FABIB=~/.dotfiles/latex/fabib.bib
export EDITOR=nvim
export VISUAL="$EDITOR"

# Using starship prompt
eval "$(starship init zsh)"

# Personal scripts
export PATH="$HOME/bin:$PATH"

# GNU instead of BSD coreutils
export PATH="/opt/homebrew/opt/coreutils/libexec/gnubin:$PATH"
export PATH="/opt/homebrew/opt/grep/libexec/gnubin:$PATH"

# Poetry 
export PATH="$HOME/.local/bin:$PATH"

# fzf
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
export FZF_BASE="$HOME/.fzf"
export FZF_DEFAULT_COMMAND='rg --hidden --no-ignore --files -g "!.git/"'
export FZF_DEFAULT_OPTS="--height 40% --layout=reverse --border"

# Search
alias fp="fd --hidden | fzf --multi --preview 'bat --style=numbers --color=always {}'"
alias vii='fp | xargs -o nvim'

# Set quarto python environment
export QUARTO_PYTHON="$HOME/.venvs/quarto3.10/bin/python3.10"

# ChatGPT authentication
source "$HOME/.openai_key.zsh"

# Homebrew
if [ "$(whoami)" = "fabian.gunzinger" ]; then
    eval "$(/opt/homebrew/bin/brew shellenv)"
fi

# Editor for remote and local sessions
if [[ -n $ssh_connection ]]; then
 export editor='vim'
else
 export editor='nvim'
fi



